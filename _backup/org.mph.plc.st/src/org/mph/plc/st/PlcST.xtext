grammar org.mph.plc.st.PlcST

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate plcST "http://www.mph.org/plc/st/PlcST"

/* B.1.6 Sequential function chart elements */
sequential_function_chart: sfc_network (sfc_network)*;
sfc_network: initial_step (step|transition|action)*;
initial_step:
	'INITIAL_STEP' 
	step_name ':' (action_association ';')* 
	'END_STEP';
step: 
	'STEP' 
	step_name ':' (action_association ';')* 
	'END_STEP';
step_name: identifier;
action_association:	action_name '(' (action_qualifier)? (',' indicator_name)* ')'
action_name: identifier;
action_qualifier: 'N'|'R'|'S'|'P'|(timed_qualifier ',' action_time);
timed_qualifier: 'L'|'D'|'SD'|'DS'|'SL';
action_time: duration|variable_name;
indicator_name: variable_name;
transition: 
	'TRANSITION' (transition_name)? ('(' 'PRIORITY' ':=' integer ')')?
	'FROM' steps 'TO' steps
	transition_condition
	'END_TRANSITION';
transition_name: identifier;
steps: step_name|('(' step_name ',' step_name (',' step_name)* ')');
transition_condition: 
	':' simple_instruction_list|(':=' expression ';')|(':' (fbd_network|rung));
action: 
	'ACTION' action_name ':'
	function_block_body
	'END_ACTION';
	

/* B.1.5.3 Programs */
program_type_name: identifier;
program_declaration:
	'PROGRAM' program_type_name
	(io_var_declarations|other_var_declarations|located_var_declarations|program_access_decls)*
	function_block_body
	'END_PROGRAM';
program_access_decls:
	'VAR_ACCESS' program_access_decl ';'
	(program_access_decl ';')*
	'END_VAR';
program_access_decl: 
	access_name ':' symbolic_variable ':' non_generic_type_name (direction)?;

/* B.1.5.2 Function blocks */
function_block_type_name: standard_function_block_name|derived_function_block_name; 
standard_function_block_name: 'USE HERE FUNCTION NAMES <as defined in 2.5.2.3>';
derived_function_block_name: identifier;
function_block_declaration:
	'FUNCTION_BLOCK' derived_function_block_name
	(io_var_declarations|other_var_declarations)*
	function_block_body
	'END_FUNCTION_BLOCK';
other_var_declarations: external_var_declarations|var_declarations|retentive_var_declarations|non_retentive_var_declarations|temp_var_decls|incompl_located_var_declarations;
temp_var_decls:
	'VAR_TEMP'
	temp_var_decl ';'
	(temp_var_decl ';')*
	'END_VAR';
non_retentive_var_decls:
	'VAR' 'NON_RETAIN'
	var_init_decl ';'
	(var_init_decl ';');
	'END_VAR';
/* !!!>>> TO ADD OTHER LANGUAGES JUST EXTEND FUNCTION BODY ALTERNATIVES LIST<<<!!! */	
function_block_body: sequential_function_chart|ladder_diagram|function_block_diagram|instruction_list|statement_list;


/* B.1.5.1 Functions */
function_name: standard_function_name|derived_function_name;
standard_function_name: 'USE HERE FUNCTION NAMES <as defined in 2.5.1.5>';
derived_function_name: identifier;
function_declaration:
	'FUNCTION' derived_function_name ':' (elementary_type_name|derived_type_name)
	(io_var_declarations|function_var_decls)*
	function_body
	'END_FUNCTION';
io_var_declarations: input_declarations|output_declarations|input_output_declarations;
function_var_decls: 
	'VAR' ('CONSTANT')?
	var2_init_decl ';' 
	(var2_init_decl ';')* 
	'END_VAR';	
/* !!!>>> TO ADD OTHER LANGUAGES JUST EXTEND FUNCTION BODY ALTERNATIVES LIST<<<!!! */
function_body: ladder_diagram|function_block_diagram|instruction_list|statement_list;
var2_init_decl: var1_init_decl|array_var_init_decl|structured_var_init_decl|string_var_declaration;
	

/* B.1.4.3 Declaration and initialization */
input_declarations:
	'VAR_INPUT' ('RETAIN'|'NON_RETAIN')?
	input_declaration ';'
	(input_declaration ';')*
	'END_VAR';
input_declaration: var_init_decl|edge_declaration;
edge_declaration: var1_list ':' 'BOOL' 'R_EDGE'|'F_EDGE';
var_init_decl: var1_init_decl|array_var_init_decl|structured_var_init_decl|fb_name_decl|string_var_declaration;
var1_init_decl: 
	var1_list ':' (simple_spec_init|subrange_spec_init|enumerated_spec_init);
var1_list: 
	variable_name (',' variable_name)*;
array_var_init_decl: 
	var1_list ':' array_spec_init;
structured_var_init_decl: 
	var1_list ':' initialized_structure;
fb_name_decl: 
	fb_name_list ':' function_block_type_name ()’:=’ structure_initialization)?;
fb_name_list: fb_name (',' fb_name)*;
fb_name: identifier;
output_declarations:
	'VAR_OUTPUT' ('RETAIN'|'NON_RETAIN')?
	var_init_decl ';'
	(var_init_decl ';')*
	'END_VAR';
input_output_declarations:
	'VAR_IN_OUT'
	var_declaration ';'
	(var_declaration ';')*
	'END_VAR';
var_declaration: temp_var_decl|fb_name_decl;
temp_var_decl: var1_declaration|array_var_declaration|structured_var_declaration|string_var_declaration;
var1_declaration: 
	var1_list ':' (simple_specification|subrange_specification|enumerated_specification);
array_var_declaration: 
	var1_list ':' array_specification;
structured_var_declaration: 
	var1_list ':' structure_type_name;
var_declarations:
	'VAR' ('CONSTANT')?
	var_init_decl ';'
	((var_init_decl ';'))*
	'END_VAR';
retentive_var_declarations:
	'VAR' 'RETAIN'
	var_init_decl ';'
	(var_init_decl ';')*
	'END_VAR';
located_var_declarations:
	'VAR' ('CONSTANT'|'RETAIN'|'NON_RETAIN')?
	located_var_decl ';'
	(located_var_decl ';')*
	'END_VAR';
located_var_decl: 
	(variable_name)? location ':' located_var_spec_init;
external_var_declarations:;
	'VAR_EXTERNAL' ('CONSTANT')?
	external_declaration ';'
	(external_declaration ';')*
	'END_VAR';
external_declaration: 
	global_var_name ':' (simple_specification|subrange_specification|enumerated_specification|array_specification|structure_type_name|function_block_type_name);
global_var_name: identifier;
global_var_declarations:
	'VAR_GLOBAL' ('CONSTANT'|'RETAIN')?
	global_var_decl ';'
	(global_var_decl ';')*
	'END_VAR';
global_var_decl: 
	global_var_spec ':' (located_var_spec_init|function_block_type_name)?;
global_var_spec: global_var_list|(global_var_name)? location;
located_var_spec_init: simple_spec_init|subrange_spec_init|enumerated_spec_init|array_spec_init|initialized_structure|single_byte_string_spec|double_byte_string_spec;
location: 
	'AT' direct_variable;
global_var_list: global_var_name (',' global_var_name)*;
string_var_declaration: single_byte_string_var_declaration|double_byte_string_var_declaration;
single_byte_string_var_declaration:
	var1_list ':' single_byte_string_spec;
single_byte_string_spec:
	'STRING' ('[' integer ']')? (':=' single_byte_character_string)?
double_byte_string_var_declaration:
	var1_list ':' double_byte_string_spec;
double_byte_string_spec:
	'WSTRING' ('[' integer ']')? (':=' double_byte_character_string)?;
incompl_located_var_declarations:
	'VAR' ('RETAIN'|'NON_RETAIN')?
	incompl_located_var_decl ';'
	(incompl_located_var_decl ';')*
	'END_VAR';
incompl_located_var_decl: 
	variable_name incompl_location ':' var_spec;
incompl_location: 
	'AT' '%' ('I'|'Q'|'M') '*';
var_spec: simple_specification|subrange_specification|enumerated_specification|array_specification|structure_type_name|('STRING' ('[' integer ']')?)|('WSTRING' ('[' integer ']')?)


/* B.1.4.2 Multi-element variables */
multi_element_variable: array_variable|structured_variable;
array_variable: subscripted_variable subscript_list;
subscripted_variable: symbolic_variable;
subscript_list: 
	'[' subscript (',' subscript)* ']';
subscript: expression;
structured_variable: 
	record_variable '.' field_selector;
record_variable: symbolic_variable;
field_selector: identifier;


/* B.1.4.1 Directly represented variables */	
direct_variable: 
	'%' location_prefix size_prefix integer ('.' integer)*;
location_prefix: 'I'|'Q'|'M';
size_prefix: NIL|'X'|'B'|'W'|'D'|'L';


/* B.1.4 Variables */
variable: direct_variable|symbolic_variable;
symbolic_variable: variable_name|multi_element_variable;
variable_name: identifier;


/* B.1.3.3 Derived data types */
derived_type_name: single_element_type_name|array_type_name|structure_type_name|string_type_name;
single_element_type_name: simple_type_name|subrange_type_name|enumerated_type_name;
simple_type_name: identifier;
subrange_type_name: identifier;
enumerated_type_name: identifier;
array_type_name: identifier;
structure_type_name: identifier;
data_type_declaration:
	'TYPE' type_declaration ';'
	(type_declaration ';')*
	'END_TYPE'
type_declaration: single_element_type_declaration|array_type_declaration|structure_type_declaration|string_type_declaration;
single_element_type_declaration: simple_type_declaration|subrange_type_declaration|enumerated_type_declaration;
simple_type_declaration: 
	simple_type_name ':' simple_spec_init;
simple_spec_init:
	simple_specification (':=' constant)?;
simple_specification: elementary_type_name|simple_type_name;
subrange_type_declaration: 
	subrange_type_name ':' subrange_spec_init;
subrange_spec_init: 
	subrange_specification (':=' signed_integer)?;
subrange_specification: 
	(integer_type_name '(' subrange')')|subrange_type_name;
subrange: 
	signed_integer '..' signed_integer;
enumerated_type_declaration:
	enumerated_type_name ':' enumerated_spec_init;
enumerated_spec_init: 
	enumerated_specification (':=' enumerated_value)?;
enumerated_specification:
	('(' enumerated_value (',' enumerated_value)* ')')|enumerated_type_name;
enumerated_value: 
	(enumerated_type_name '#')? identifier;
array_type_declaration: 
	array_type_name ':' array_spec_init;
array_spec_init: 
	array_specification (':=' array_initialization)?;
array_specification: 
	array_type_name|('ARRAY' '[' subrange (',' subrange)* ']' 'OF' non_generic_type_name);
array_initialization:
	'[' array_initial_elements (',' array_initial_elements)* ']';
array_initial_elements:
	array_initial_element|(integer '(' (array_initial_element)? ')');
array_initial_element: constant|enumerated_value|structure_initialization|array_initialization;
structure_type_declaration:
	structure_type_name ':' structure_specification;
structure_specification: structure_declaration|initialized_structure;
initialized_structure:
	structure_type_name (':=' structure_initialization)?;
structure_declaration:
	'STRUCT' structure_element_declaration ';'
	(structure_element_declaration ';')*
	'END_STRUCT';
structure_element_declaration: 
	structure_element_name ':' (simple_spec_init|subrange_spec_init|enumerated_spec_init|array_spec_init|initialized_structure);
structure_element_name: identifier;
structure_initialization:
	'(' structure_element_initialization (',' structure_element_initialization)* ')';
structure_element_initialization:
	structure_element_name ':=' (constant|enumerated_value|array_initialization|structure_initialization);
string_type_name: identifier;
string_type_declaration: string_type_name ':' 'STRING'|'WSTRING' ('[' integer ']')? (':=' character_string)?;


/* B.1.3 Data types */
data_type_name: non_generic_type_name|generic_type_name;
non_generic_type_name: elementary_type_name|derived_type_name;


/* B.1.3.2 Generic data types */
generic_type_name: 'ANY'|'ANY_DERIVED'|'ANY_ELEMENTARY'|'ANY_MAGNITUDE'|'ANY_NUM'|'ANY_REAL'|'ANY_INT'|'ANY_BIT'|'ANY_STRING'|'ANY_DATE';


/* B.1.3.1 Elementary data types */
elementary_type_name: numeric_type_name|data_type_name|bit_string_type_name|'STRING'|'WSTRING'|'TIME';
numeric_type_name: integer_type_name | real_type_name;
integer_type_name: signed_integer_type_name|unsigned_integer_type_name;
signed_integer_type_name: 'SINT'|'INT'|'DINT'|'LINT';
unsigned_integer_type_name: 'USINT'|'UINT'|'UDINT'|'ULINT';
real_type_name: 'REAL'|'LREAL';
date_type_name: 'DATE'|'TIME_OF_DAY'|'TOD'|'DATE_AND_TIME'|'DT';
bit_string_type_name: 'BOOL'|'BYTE'|'WORD'|'DWORD'|'LWORD';


/* B.1.2.3.2 Time of day and date */
time_of_day: ('TIME_OF_DAY' | 'TOD') '#' daytime;
daytime: day_hour ':' day_minute ':' day_second;
day_hour: integer;
day_minute: integer;
day_second: fixed_point;
date: 'DATE'|'D' '#' date_literal;
date_literal: year '-' month '-' day;
year: integer;
month: integer;
day: integer;
date_and_time: ('DATE_AND_TIME' | 'DT') '#' date_literal '-' daytime;


/* B.1.2.3.1 duration */
duration: 'T'|'TIME' '#' '-'? interval;
interval: days | hours | minutes | seconds | milliseconds;
days: fixed_point 'd'|(integer 'd') '_'? hours;
fixed_point: integer ('.' integer)?;
hours: fixed_point 'h'|(integer 'h') '_'? minutes;
minutes: fixed_point 'm'|(integer 'm') '_'? seconds;
seconds: fixed_point 's'|(integer 's') '_'? milliseconds;
milliseconds: fixed_point 'ms';


/* B.1.2.3 Time literals */
time_literal: duration|time_of_day|date|date_and_time;


/* B.1.2.2 Character strings */
character_string: single_byte_character_representation | double_byte_character_string;
single_byte_character_string: "'" single_byte_character_representation* "'";
double_byte_character_string: '"' double_byte_character_representation* '"';
single_byte_character_representation:
	common_character_representation|"$'"|'"'|'$' hex_digit hex_digit;
double_byte_character_representation: 
	common_character_representation|'$"'|"'"|'$' hex_digit hex_digit hex_digit hex_digit;
common_character_representation: (!'$'|!'"'|!"'"|PRINTABLE)|'$$'|'$L'|'$N'|'$P'|'$R'|'$T'|'$l'|'$n'|'$p'|'$r'|'$t';


/* B.1.2.1 Numeric literals */	
numeric_literal: integer_literal|real_literal;
integer_literal: (integer_type_name '#')? (signed_integer|binary_integer|octal_integer|hex_integer);
signed_integer: ('+'|'-')? integer;
integer: digit ('_'? digit)*;
binary_integer: '2#' bit ('_'? bit)*;
bit: '1' | '0';
octal_integer: '8#' octal_digit ('_'? octal_digit)*;
hex_integer: '16#' hex_digit ('_' hex_digit)*;
real_literal: (real_type_name '#')? signed_integer '.' integer (exponent)?;
exponent: 'E'|'e' ('+'|'-')? integer;
bit_string_literal: (('BYTE'|'WORD'|'DWORD'|'LWORD')'#')? (integer|binary_integer|octal_integer|hex_integer);
boolean_literal: ('BOOL#'? '1'|'0') | ('TRUE'|'FALSE');


/* B.1.2 Constants */
constant: numeric_literal|character_string|time_literal|bit_string_literal|boolean_literal;


/* B.1.1 letters, digits and identifiers */
// terminal fragment PRINTABLE:;
terminal letter: 'A'..'Z' | 'a'..'z';
terminal digit:	'0'..'9';
terminal octal_digit: '0'..'7';
terminal hex_digit: digit | 'A'..'F';
terminal identifier: (letter | '_' (letter | digit)) ('_'? (letter | digit))*;
terminal NIL: 'NIL';
;