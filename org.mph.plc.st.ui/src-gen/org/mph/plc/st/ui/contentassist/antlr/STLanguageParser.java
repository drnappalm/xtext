/*
* generated by Xtext
*/
package org.mph.plc.st.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mph.plc.st.services.STLanguageGrammarAccess;

public class STLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private STLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mph.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser createParser() {
		org.mph.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser result = new org.mph.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBODY_ELEMENTAccess().getAlternatives(), "rule__BODY_ELEMENT__Alternatives");
					put(grammarAccess.getPOUAccess().getBodyAssignment(), "rule__POU__BodyAssignment");
					put(grammarAccess.getPOU_BODYAccess().getElementsAssignment(), "rule__POU_BODY__ElementsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mph.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser typedParser = (org.mph.plc.st.ui.contentassist.antlr.internal.InternalSTLanguageParser) parser;
			typedParser.entryRulePOU();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public STLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(STLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
