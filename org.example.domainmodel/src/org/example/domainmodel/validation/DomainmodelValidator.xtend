/*
 * generated by Xtext
 */
package org.example.domainmodel.validation

import org.example.domainmodel.domainmodel.Entity
import org.example.domainmodel.domainmodel.DomainmodelPackage
import org.eclipse.xtext.validation.Check
import org.example.domainmodel.domainmodel.Feature

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DomainmodelValidator extends AbstractDomainmodelValidator {

	val WARNING_NAME_CAPITAL_LETTER = "The Name property must start with a capital letter."
	val WARNING_PROPERTY_NAME_NOT_UNIQUE = "The Name of each property must be unique."
	
  	@Check
	def checkNameStartsWithCapital(Entity entity) {
		if(!Character::isUpperCase(entity.name.charAt(0))) {
			warning(WARNING_NAME_CAPITAL_LETTER, DomainmodelPackage$Literals::TYPE__NAME)
		}
	} 
	
	@Check
	def checkPropertiesUniqueness(Feature feature) {
		// no need to check the features 
		var superType = (feature.eContainer as Entity).superType
		while (superType != null) {			
			for (superFeature : superType.features){
				if(feature.name.equals(superFeature.name)) {
					error(WARNING_PROPERTY_NAME_NOT_UNIQUE, DomainmodelPackage$Literals::FEATURE__NAME)
					return;
				}	
			}
			
			superType = superType.superType
		} 
	}
}
