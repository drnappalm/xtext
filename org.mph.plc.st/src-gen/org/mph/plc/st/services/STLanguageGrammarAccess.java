/*
* generated by Xtext
*/
package org.mph.plc.st.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class STLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class POUElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POU");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyPOU_BODYParserRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//POU:
		//	body=POU_BODY;
		public ParserRule getRule() { return rule; }

		//body=POU_BODY
		public Assignment getBodyAssignment() { return cBodyAssignment; }

		//POU_BODY
		public RuleCall getBodyPOU_BODYParserRuleCall_0() { return cBodyPOU_BODYParserRuleCall_0; }
	}

	public class POU_BODYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POU_BODY");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsBODY_ELEMENTParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//POU_BODY:
		//	elements+=BODY_ELEMENT;
		public ParserRule getRule() { return rule; }

		//elements+=BODY_ELEMENT
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//BODY_ELEMENT
		public RuleCall getElementsBODY_ELEMENTParserRuleCall_0() { return cElementsBODY_ELEMENTParserRuleCall_0; }
	}

	public class BODY_ELEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BODY_ELEMENT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCOMMENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPRAGMATerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BODY_ELEMENT returns ecore::EString:
		//	COMMENT | PRAGMA | IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//COMMENT | PRAGMA | IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//COMMENT
		public RuleCall getCOMMENTTerminalRuleCall_0() { return cCOMMENTTerminalRuleCall_0; }

		//PRAGMA
		public RuleCall getPRAGMATerminalRuleCall_1() { return cPRAGMATerminalRuleCall_1; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}
	
	
	private POUElements pPOU;
	private POU_BODYElements pPOU_BODY;
	private BODY_ELEMENTElements pBODY_ELEMENT;
	private TerminalRule tPRAGMA;
	private TerminalRule tCOMMENT;
	private TerminalRule tIDENTIFIER;
	private TerminalRule tCHARACTER;
	private TerminalRule tLETTER;
	private TerminalRule tDIGIT;
	private TerminalRule tSYMBOL;
	private TerminalRule tUNDERSCORE;
	
	private final Grammar grammar;

	@Inject
	public STLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mph.plc.st.STLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//POU:
	//	body=POU_BODY;
	public POUElements getPOUAccess() {
		return (pPOU != null) ? pPOU : (pPOU = new POUElements());
	}
	
	public ParserRule getPOURule() {
		return getPOUAccess().getRule();
	}

	//POU_BODY:
	//	elements+=BODY_ELEMENT;
	public POU_BODYElements getPOU_BODYAccess() {
		return (pPOU_BODY != null) ? pPOU_BODY : (pPOU_BODY = new POU_BODYElements());
	}
	
	public ParserRule getPOU_BODYRule() {
		return getPOU_BODYAccess().getRule();
	}

	//BODY_ELEMENT returns ecore::EString:
	//	COMMENT | PRAGMA | IDENTIFIER;
	public BODY_ELEMENTElements getBODY_ELEMENTAccess() {
		return (pBODY_ELEMENT != null) ? pBODY_ELEMENT : (pBODY_ELEMENT = new BODY_ELEMENTElements());
	}
	
	public ParserRule getBODY_ELEMENTRule() {
		return getBODY_ELEMENTAccess().getRule();
	}

	//terminal PRAGMA:
	//	"{" !"{"* "}";
	public TerminalRule getPRAGMARule() {
		return (tPRAGMA != null) ? tPRAGMA : (tPRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRAGMA"));
	} 

	//terminal COMMENT:
	//	"(*" !"(*"* "*)";
	public TerminalRule getCOMMENTRule() {
		return (tCOMMENT != null) ? tCOMMENT : (tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT"));
	} 

	//terminal IDENTIFIER:
	//	"^"? (LETTER | UNDERSCORE) !UNDERSCORE (LETTER | DIGIT | UNDERSCORE)* !UNDERSCORE;
	public TerminalRule getIDENTIFIERRule() {
		return (tIDENTIFIER != null) ? tIDENTIFIER : (tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER"));
	} 

	//terminal fragment CHARACTER:
	//	(LETTER | DIGIT | SYMBOL | UNDERSCORE)*;
	public TerminalRule getCHARACTERRule() {
		return (tCHARACTER != null) ? tCHARACTER : (tCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER"));
	} 

	//terminal fragment LETTER:
	//	"a".."z" | "A".."Z";
	public TerminalRule getLETTERRule() {
		return (tLETTER != null) ? tLETTER : (tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER"));
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal fragment SYMBOL:
	//	" " | "!" | "\"" | "%" | "&" | "\'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" |
	//	"?" | "#" | "Â£" | "$" | "|";
	public TerminalRule getSYMBOLRule() {
		return (tSYMBOL != null) ? tSYMBOL : (tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYMBOL"));
	} 

	//terminal fragment UNDERSCORE:
	//	"_";
	public TerminalRule getUNDERSCORERule() {
		return (tUNDERSCORE != null) ? tUNDERSCORE : (tUNDERSCORE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNDERSCORE"));
	} 
}
